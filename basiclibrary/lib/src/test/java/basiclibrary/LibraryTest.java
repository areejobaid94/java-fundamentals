/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        System.out.println("Roll Method Test");
        //test  roll first solution;
        int[] outPut = classUnderTest.roll(5);
        assertEquals(5,outPut.length);
        assertEquals(true,classUnderTest.isCorrectOutput(outPut[0]));

        //test roll 2nd solution;
        int[] outPutRol2nd = classUnderTest.roll2ndSolution(5);
        assertEquals(5,outPutRol2nd.length);
        assertEquals(0,classUnderTest.roll2ndSolution(0).length);
        assertEquals(true,classUnderTest.isCorrectOutput(outPutRol2nd[0]));

        System.out.println("Duplicate Method Test");
        //test Contains first Duplicates solution;
        String[] stringOfArrWithoutDuplicates = {"a","b","c","d"};
        String[] stringOfArrWithDuplicates = {"a","b","d","d"};
        String[] stringOfArrEmpty = {};
        assertEquals(false,classUnderTest.containsDuplicates(stringOfArrWithoutDuplicates));
        assertEquals(true,classUnderTest.containsDuplicates(stringOfArrWithDuplicates));
        assertEquals(false,classUnderTest.containsDuplicates(stringOfArrEmpty));

        //test Contains Duplicates 2nd solution;
        assertEquals(false,classUnderTest.containsDuplicates2ndSol(stringOfArrWithoutDuplicates));
        assertEquals(true,classUnderTest.containsDuplicates2ndSol(stringOfArrWithDuplicates));
        assertEquals(false,classUnderTest.containsDuplicates2ndSol(stringOfArrEmpty));

        //test Contains Duplicates 3rd solution;
        assertEquals(false,classUnderTest.containsDuplicates3rdSol(stringOfArrWithoutDuplicates));
        assertEquals(true,classUnderTest.containsDuplicates3rdSol(stringOfArrWithDuplicates));
        assertEquals(false,classUnderTest.containsDuplicates3rdSol(stringOfArrEmpty));

        System.out.println("Calculating Method Test");
        // test Calculating Averages
        int[] calculatingAveragesArr = {2,2,2};
        int[] calculatingAveragesArrEmpty = {};
        assertEquals(0,(int) classUnderTest.calculatingAverages(calculatingAveragesArrEmpty));
        assertEquals(2, (int) classUnderTest.calculatingAverages(calculatingAveragesArr));

        System.out.println("Min Averages Method Test");
        // test Min Averages
        int[][] arrOfArrays = {{1,2,3},{4,5,6},{10,1,2}};
        int[][] ArrayOfArrar2nd = {{1,2,3},{4,5,6},{1,1,2}};
        assertEquals(arrOfArrays[0],classUnderTest.minAvg(arrOfArrays));
        assertEquals(ArrayOfArrar2nd[2], classUnderTest.minAvg(ArrayOfArrar2nd));
    }
    @Test public void analyzingWeatherData() {
        Library classUnderTest = new Library();
        assertEquals("Never saw temperature:63",classUnderTest.analyzingWeatherData(classUnderTest.weeklyMonthTemperatures).split("\n")[0]);
        assertEquals("Never saw temperature:67",classUnderTest.analyzingWeatherData(classUnderTest.weeklyMonthTemperatures).split("\n")[1]);
    }
    @Test public void tally() {
        Library classUnderTest = new Library();
        List<String> VotesEmpty = new ArrayList<>();
        System.out.println(classUnderTest.tally(classUnderTest.votes).split(" ")[0]);
        assertEquals("Bush",classUnderTest.tally(classUnderTest.votes).split(" ")[0]);
        assertEquals("No Votes",classUnderTest.tally(VotesEmpty));
    }

    }
