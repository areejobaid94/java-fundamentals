/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.lang.Math;
import java.util.*; //Import for Arrays and Scanner
import java.util.Random;
import java.util.HashMap; // import the HashMap class
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.stream.Collectors;

public class Library {
    public static int[][] weeklyMonthTemperatures = {
            {66, 64, 58, 65, 71, 57, 60},
            {57, 65, 65, 70, 72, 65, 51},
            {55, 54, 60, 53, 59, 57, 61},
            {65, 56, 55, 52, 55, 62, 57}
    };
    public static List<String> votes = new ArrayList<>();

    public Library(){
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
    }

    public static void main(String[] args)
    {
//        System.out.println(Arrays.toString(roll(4)));
        // testing code by print results
        String[] arr = {"1","2","5"};
        int[] newArr = {1,2,5};
        long[] chalArr = {1,2,6,7};
        int[][] arrOfArrays = {{1,2,3},{4,5,6},{10,1,2}};

        List<String> votes = new ArrayList<>();

//        System.out.println(roll(5));
//        System.out.println(containsDuplicates(arr));
//        System.out.println(calculatingAverages(newArr));
//        System.out.println(Arrays.toString(minAvg(arrOfArrays)));
//        System.out.println(analyzingWeatherData(weeklyMonthTemperatures));
        System.out.println(tally(votes).split(" ")[0]);

//        System.out.println(analyzingWeatherData(weeklyMonthTemperatures).split("\n")[1]);

    }

    // roll method
    public static int[] roll(int n){
       // declare the Arr;
       int[] arr = new int[n];
       // loop n time;
       for(int i = 0; i < n ;i++){
         //put random value to array
         arr[i] =(int) (Math.random() * 7);
       }
       // return arr;
       return arr;
    }

    // 2nd solution of Roll
    public static int[] roll2ndSolution(int n){
        // declare the Arr;
        int[] arr = new int[n];
        // loop n time;
        for(int i = 0; i < n ;i++){
            //put random value to array
            Random rand = new Random();
            arr[i] = rand.nextInt(6) +1;
        }
        // return arr;
        return arr;
    }

    // Method isCorrectOutput to test the return value or role => if the return value more than 0 and less than 6;
    public static boolean isCorrectOutput(int num){
        return  num < 7 && num > 0;
    };

    // Contains Duplicates first solution;
    public static boolean containsDuplicates (String[] arr){
        //I used the map to save the value of each index;
        HashMap<String, Integer> capitalCities = new HashMap<>();
        // loop threw the array;
       for(int i = 0; i < arr.length ; i++){
         // check if the value in the map.
         if(capitalCities.get(arr[i]) == null){
            // if value is not in the map add it
           capitalCities.put(arr[i], 1);
         }else{
             // else return true;
             return true;
         }
       }
       // return false if not returned true;
       return false;
      }
    // Contains Duplicates 2nd solution;
    public static boolean containsDuplicates2ndSol (String[] arr){
        // loop threw array;
        for(int i = 0 ; i < arr.length ; i++){
            // loop threw array after i;
            for(int j = i+1 ; j < arr.length ; j++){
                // check the element of i if it is equal the element of j return true;
                if(arr[i] == arr[j]){
                    return true;
                }
            }
        }
        // return false if not returned true;
        return false;
    }

    // Contains Duplicates 3rd solution;
    public static boolean containsDuplicates3rdSol (String[] arr){
        // make a list from the array;
        List<String> list = new  ArrayList<String>();
        // loop threw array;
        for(int i = 0; i < arr.length ; i++){
            // if list contains the item return true
            if(list.contains(arr[i]) == true){
                return true;
            }else{
                //else add the element to the list;
                list.add(arr[i]);
            }
        }
        // return false if not returned true;
        return false;
    }

    // Calculating Averages solution;
    public static double calculatingAverages (int[] arr){
        //declare double var
        double sum = 0;
        // loop threw array;
        for(int i = 0 ; i < arr.length ; i++){
            // sum all array value;
            sum += arr[i];
        }
        // return the avg;
        return (sum/arr.length);
    }

    // Min Avg solution;
    public static int[] minAvg (int[][] arr){
        //declare double var to store the min value => defolt value first Avg;
        double minArr = calculatingAverages(arr[0]);
        // declare array to store the array of min avg => defult value first arr;
        int[] returnArr = arr[0];
        // loop threw array;
        for(int i = 0 ; i < arr.length ; i++){
            //declare double var to store corrant array Avg;
            double arrAvg = calculatingAverages(arr[i]);
            // check the average => if the corrant array Avg less the the minArr change the value of minArr and returnArr;
            if(minArr > arrAvg){
                minArr = arrAvg;
                returnArr = arr[i];
            }
        }
        return returnArr;
    };
    public static String analyzingWeatherData(int[][] array){
        if(array.length == 0 && array[0].length == 0){
            System.out.println("High: " + 0);
            System.out.println("Low: " + 0);
            return "";
        };
        Integer max = array[0][0];
        Integer min =array[0][0];
        Set<Integer> uniqueTemperatures = new HashSet<Integer>();
        for(int[] item: array ){
            Map<String,Integer> maxMinArrayValue = maxAndMinArrayValue(item);
            uniqueTemperatures.addAll(uniqueTemperatures(item));
            if(maxMinArrayValue.get("Max") >  max){
                max = maxMinArrayValue.get("Max");
            }else if(maxMinArrayValue.get("Min") <  min){
                min = maxMinArrayValue.get("Min");
            }
        };
        System.out.println("High: " + max);
        System.out.println("Low: " + min);
        String temperatureNotSeen = "";
        for (Integer i = min ; i <  max; i++){
            if(uniqueTemperatures.contains(i) == false){
                temperatureNotSeen += "Never saw temperature:" + i +"\n";
            }
        }
        return temperatureNotSeen;
    };

    public static Map<String,Integer> maxAndMinArrayValue(int[] array){
        Map<String,Integer>  minMax = new HashMap<String,Integer>();
        minMax.put("Min", array[0]);
        minMax.put("Max", array[0]);
        for(int item : array){
            if(minMax.get("Max") <  item){
                minMax.put("Max", item);
            }else if(minMax.get("Min") >  item){
                minMax.put("Min", item);
            }
        };
        return minMax;
    }

    public static Set<Integer> uniqueTemperatures(int[] array){
        Set<Integer> uniqueTemperatures = new HashSet<Integer>();
        for(int item : array){
            uniqueTemperatures.add(item);
        };
        return uniqueTemperatures;
    }

    public static String tally(List<String> list){
        if(list.size() == 0 )return "No Votes";
        Map<String, Long> counts =
                list.stream().collect(Collectors.groupingBy(e -> e, Collectors.counting()));
        // System.out.println(counts);
        Map.Entry<String, Long> maxEntry = null;
        for (Map.Entry<String, Long> entry : counts.entrySet())
        {
            if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0)
            {
                maxEntry = entry;
            }
        }
        return maxEntry.getKey() + " received the most votes!";
    }

}
